// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: display.proto

package display

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Plants_QueryAll_FullMethodName    = "/display.plants/queryAll"
	Plants_QueryHas_FullMethodName    = "/display.plants/queryHas"
	Plants_QueryNotHas_FullMethodName = "/display.plants/queryNotHas"
)

// PlantsClient is the client API for Plants service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlantsClient interface {
	QueryAll(ctx context.Context, in *QueryPlantsReq, opts ...grpc.CallOption) (*PlantsResp, error)
	QueryHas(ctx context.Context, in *QueryPlantsReq, opts ...grpc.CallOption) (*PlantsResp, error)
	QueryNotHas(ctx context.Context, in *QueryPlantsReq, opts ...grpc.CallOption) (*PlantsResp, error)
}

type plantsClient struct {
	cc grpc.ClientConnInterface
}

func NewPlantsClient(cc grpc.ClientConnInterface) PlantsClient {
	return &plantsClient{cc}
}

func (c *plantsClient) QueryAll(ctx context.Context, in *QueryPlantsReq, opts ...grpc.CallOption) (*PlantsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlantsResp)
	err := c.cc.Invoke(ctx, Plants_QueryAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantsClient) QueryHas(ctx context.Context, in *QueryPlantsReq, opts ...grpc.CallOption) (*PlantsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlantsResp)
	err := c.cc.Invoke(ctx, Plants_QueryHas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plantsClient) QueryNotHas(ctx context.Context, in *QueryPlantsReq, opts ...grpc.CallOption) (*PlantsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlantsResp)
	err := c.cc.Invoke(ctx, Plants_QueryNotHas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlantsServer is the server API for Plants service.
// All implementations must embed UnimplementedPlantsServer
// for forward compatibility.
type PlantsServer interface {
	QueryAll(context.Context, *QueryPlantsReq) (*PlantsResp, error)
	QueryHas(context.Context, *QueryPlantsReq) (*PlantsResp, error)
	QueryNotHas(context.Context, *QueryPlantsReq) (*PlantsResp, error)
	mustEmbedUnimplementedPlantsServer()
}

// UnimplementedPlantsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPlantsServer struct{}

func (UnimplementedPlantsServer) QueryAll(context.Context, *QueryPlantsReq) (*PlantsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAll not implemented")
}
func (UnimplementedPlantsServer) QueryHas(context.Context, *QueryPlantsReq) (*PlantsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryHas not implemented")
}
func (UnimplementedPlantsServer) QueryNotHas(context.Context, *QueryPlantsReq) (*PlantsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNotHas not implemented")
}
func (UnimplementedPlantsServer) mustEmbedUnimplementedPlantsServer() {}
func (UnimplementedPlantsServer) testEmbeddedByValue()                {}

// UnsafePlantsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlantsServer will
// result in compilation errors.
type UnsafePlantsServer interface {
	mustEmbedUnimplementedPlantsServer()
}

func RegisterPlantsServer(s grpc.ServiceRegistrar, srv PlantsServer) {
	// If the following call pancis, it indicates UnimplementedPlantsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Plants_ServiceDesc, srv)
}

func _Plants_QueryAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPlantsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantsServer).QueryAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Plants_QueryAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantsServer).QueryAll(ctx, req.(*QueryPlantsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plants_QueryHas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPlantsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantsServer).QueryHas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Plants_QueryHas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantsServer).QueryHas(ctx, req.(*QueryPlantsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plants_QueryNotHas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPlantsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlantsServer).QueryNotHas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Plants_QueryNotHas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlantsServer).QueryNotHas(ctx, req.(*QueryPlantsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Plants_ServiceDesc is the grpc.ServiceDesc for Plants service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Plants_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "display.plants",
	HandlerType: (*PlantsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "queryAll",
			Handler:    _Plants_QueryAll_Handler,
		},
		{
			MethodName: "queryHas",
			Handler:    _Plants_QueryHas_Handler,
		},
		{
			MethodName: "queryNotHas",
			Handler:    _Plants_QueryNotHas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "display.proto",
}

const (
	Meal_QuerySubarea_FullMethodName = "/display.meal/querySubarea"
	Meal_QueryMeal_FullMethodName    = "/display.meal/queryMeal"
)

// MealClient is the client API for Meal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MealClient interface {
	QuerySubarea(ctx context.Context, in *Request, opts ...grpc.CallOption) (*QuerySubareaResp, error)
	QueryMeal(ctx context.Context, in *QueryMealReq, opts ...grpc.CallOption) (*QueryMealResp, error)
}

type mealClient struct {
	cc grpc.ClientConnInterface
}

func NewMealClient(cc grpc.ClientConnInterface) MealClient {
	return &mealClient{cc}
}

func (c *mealClient) QuerySubarea(ctx context.Context, in *Request, opts ...grpc.CallOption) (*QuerySubareaResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuerySubareaResp)
	err := c.cc.Invoke(ctx, Meal_QuerySubarea_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealClient) QueryMeal(ctx context.Context, in *QueryMealReq, opts ...grpc.CallOption) (*QueryMealResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryMealResp)
	err := c.cc.Invoke(ctx, Meal_QueryMeal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MealServer is the server API for Meal service.
// All implementations must embed UnimplementedMealServer
// for forward compatibility.
type MealServer interface {
	QuerySubarea(context.Context, *Request) (*QuerySubareaResp, error)
	QueryMeal(context.Context, *QueryMealReq) (*QueryMealResp, error)
	mustEmbedUnimplementedMealServer()
}

// UnimplementedMealServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMealServer struct{}

func (UnimplementedMealServer) QuerySubarea(context.Context, *Request) (*QuerySubareaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySubarea not implemented")
}
func (UnimplementedMealServer) QueryMeal(context.Context, *QueryMealReq) (*QueryMealResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMeal not implemented")
}
func (UnimplementedMealServer) mustEmbedUnimplementedMealServer() {}
func (UnimplementedMealServer) testEmbeddedByValue()              {}

// UnsafeMealServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MealServer will
// result in compilation errors.
type UnsafeMealServer interface {
	mustEmbedUnimplementedMealServer()
}

func RegisterMealServer(s grpc.ServiceRegistrar, srv MealServer) {
	// If the following call pancis, it indicates UnimplementedMealServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Meal_ServiceDesc, srv)
}

func _Meal_QuerySubarea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealServer).QuerySubarea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meal_QuerySubarea_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealServer).QuerySubarea(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Meal_QueryMeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMealReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealServer).QueryMeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Meal_QueryMeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealServer).QueryMeal(ctx, req.(*QueryMealReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Meal_ServiceDesc is the grpc.ServiceDesc for Meal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Meal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "display.meal",
	HandlerType: (*MealServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "querySubarea",
			Handler:    _Meal_QuerySubarea_Handler,
		},
		{
			MethodName: "queryMeal",
			Handler:    _Meal_QueryMeal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "display.proto",
}
