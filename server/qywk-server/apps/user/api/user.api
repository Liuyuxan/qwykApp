syntax = "v1"

type Result {}

type (
	LoginReq {
		userId   string `json:"userId"`
		password string `json:"password"`
	}
	RegisterReq {
		password string `json:"password"`
		code     string `json:"code"`
		email    string `json:"email"`
		nickname string `json:"nickname"`
	}
	CodeReq {
		email string `json:"email"`
	}
	ChangeReq {
		userId      string `json:"userId"`
		password    string `json:"password"`
		email       string `json:"email"`
		code        string `json:"code"`
		newPassword string `json:"newPassword"`
	}
	WechatLoginReq {
		code string `json:"code"`
	}
	ForgetRep {
		userId   string `json:"userId"`
		password string `json:"password"`
		email    string `json:"email"`
		code     string `json:"code"`
	}
)

@server (
	group:  login
	prefix: /login
)
service user {
	@doc "普通登陆"
	@handler login
	post /normal (LoginReq) returns (Result)

	@doc "微信快速登陆"
	@handler fast
	post /fast (WechatLoginReq) returns (Result)

	@doc "手机号注册"
	@handler register
	post /register (RegisterReq) returns (Result)

	@doc "修改密码"
	@handler change
	post /change (ChangeReq) returns (Result)

	@doc "忘记密码"
	@handler forget
	post /forget (ForgetRep) returns (Result)

	@doc "发送验证码"
	@handler sentCode
	post /sent/code (CodeReq) returns (Result)
}

type getUserInfoBasicReq {
	userId string `form:"userId"`
}

@server (
	group:  userinfo
	prefix: /info
	jwt:    Jwt
)
service user {
	@doc "获取用户的基础信息"
	@handler getUserInfoBasic
	get /basic (getUserInfoBasicReq) returns (Result)

	@doc "获取用户的详细信息"
	@handler getUserInfoDetail
	get /detail returns (Result)
}

// goctl api go --api user.api --dir .
