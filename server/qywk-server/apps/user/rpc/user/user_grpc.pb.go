// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Login_Login_FullMethodName       = "/user.login/login"
	Login_WechatLogin_FullMethodName = "/user.login/wechatLogin"
	Login_Register_FullMethodName    = "/user.login/register"
	Login_SentCode_FullMethodName    = "/user.login/sentCode"
	Login_Change_FullMethodName      = "/user.login/change"
	Login_Forget_FullMethodName      = "/user.login/forget"
)

// LoginClient is the client API for Login service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoginClient interface {
	// 普通登陆
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 微信快速登陆
	WechatLogin(ctx context.Context, in *WechatLoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 邮箱号注册
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
	// 发送验证码
	SentCode(ctx context.Context, in *CodeReq, opts ...grpc.CallOption) (*CodeResp, error)
	// 修改密码
	Change(ctx context.Context, in *ChangeReq, opts ...grpc.CallOption) (*ChangeResp, error)
	// 忘记密码
	Forget(ctx context.Context, in *ForgetReq, opts ...grpc.CallOption) (*ForgetResp, error)
}

type loginClient struct {
	cc grpc.ClientConnInterface
}

func NewLoginClient(cc grpc.ClientConnInterface) LoginClient {
	return &loginClient{cc}
}

func (c *loginClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, Login_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginClient) WechatLogin(ctx context.Context, in *WechatLoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, Login_WechatLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResp)
	err := c.cc.Invoke(ctx, Login_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginClient) SentCode(ctx context.Context, in *CodeReq, opts ...grpc.CallOption) (*CodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CodeResp)
	err := c.cc.Invoke(ctx, Login_SentCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginClient) Change(ctx context.Context, in *ChangeReq, opts ...grpc.CallOption) (*ChangeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeResp)
	err := c.cc.Invoke(ctx, Login_Change_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginClient) Forget(ctx context.Context, in *ForgetReq, opts ...grpc.CallOption) (*ForgetResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForgetResp)
	err := c.cc.Invoke(ctx, Login_Forget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoginServer is the server API for Login service.
// All implementations must embed UnimplementedLoginServer
// for forward compatibility.
type LoginServer interface {
	// 普通登陆
	Login(context.Context, *LoginReq) (*LoginResp, error)
	// 微信快速登陆
	WechatLogin(context.Context, *WechatLoginReq) (*LoginResp, error)
	// 邮箱号注册
	Register(context.Context, *RegisterReq) (*RegisterResp, error)
	// 发送验证码
	SentCode(context.Context, *CodeReq) (*CodeResp, error)
	// 修改密码
	Change(context.Context, *ChangeReq) (*ChangeResp, error)
	// 忘记密码
	Forget(context.Context, *ForgetReq) (*ForgetResp, error)
	mustEmbedUnimplementedLoginServer()
}

// UnimplementedLoginServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLoginServer struct{}

func (UnimplementedLoginServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedLoginServer) WechatLogin(context.Context, *WechatLoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WechatLogin not implemented")
}
func (UnimplementedLoginServer) Register(context.Context, *RegisterReq) (*RegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedLoginServer) SentCode(context.Context, *CodeReq) (*CodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SentCode not implemented")
}
func (UnimplementedLoginServer) Change(context.Context, *ChangeReq) (*ChangeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Change not implemented")
}
func (UnimplementedLoginServer) Forget(context.Context, *ForgetReq) (*ForgetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Forget not implemented")
}
func (UnimplementedLoginServer) mustEmbedUnimplementedLoginServer() {}
func (UnimplementedLoginServer) testEmbeddedByValue()               {}

// UnsafeLoginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoginServer will
// result in compilation errors.
type UnsafeLoginServer interface {
	mustEmbedUnimplementedLoginServer()
}

func RegisterLoginServer(s grpc.ServiceRegistrar, srv LoginServer) {
	// If the following call pancis, it indicates UnimplementedLoginServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Login_ServiceDesc, srv)
}

func _Login_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Login_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Login_WechatLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServer).WechatLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Login_WechatLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServer).WechatLogin(ctx, req.(*WechatLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Login_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Login_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Login_SentCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServer).SentCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Login_SentCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServer).SentCode(ctx, req.(*CodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Login_Change_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServer).Change(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Login_Change_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServer).Change(ctx, req.(*ChangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Login_Forget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServer).Forget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Login_Forget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServer).Forget(ctx, req.(*ForgetReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Login_ServiceDesc is the grpc.ServiceDesc for Login service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Login_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.login",
	HandlerType: (*LoginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "login",
			Handler:    _Login_Login_Handler,
		},
		{
			MethodName: "wechatLogin",
			Handler:    _Login_WechatLogin_Handler,
		},
		{
			MethodName: "register",
			Handler:    _Login_Register_Handler,
		},
		{
			MethodName: "sentCode",
			Handler:    _Login_SentCode_Handler,
		},
		{
			MethodName: "change",
			Handler:    _Login_Change_Handler,
		},
		{
			MethodName: "forget",
			Handler:    _Login_Forget_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

const (
	Info_GetUserInfoBasic_FullMethodName  = "/user.info/getUserInfoBasic"
	Info_GetUserInfoDetail_FullMethodName = "/user.info/getUserInfoDetail"
)

// InfoClient is the client API for Info service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InfoClient interface {
	// 查询用户的基本信息
	GetUserInfoBasic(ctx context.Context, in *UserInfoBasicReq, opts ...grpc.CallOption) (*UserInfoBasicResp, error)
	// 查询用户的详细信息
	GetUserInfoDetail(ctx context.Context, in *UserInfoDetailReq, opts ...grpc.CallOption) (*UserInfoDetailResp, error)
}

type infoClient struct {
	cc grpc.ClientConnInterface
}

func NewInfoClient(cc grpc.ClientConnInterface) InfoClient {
	return &infoClient{cc}
}

func (c *infoClient) GetUserInfoBasic(ctx context.Context, in *UserInfoBasicReq, opts ...grpc.CallOption) (*UserInfoBasicResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInfoBasicResp)
	err := c.cc.Invoke(ctx, Info_GetUserInfoBasic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoClient) GetUserInfoDetail(ctx context.Context, in *UserInfoDetailReq, opts ...grpc.CallOption) (*UserInfoDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInfoDetailResp)
	err := c.cc.Invoke(ctx, Info_GetUserInfoDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfoServer is the server API for Info service.
// All implementations must embed UnimplementedInfoServer
// for forward compatibility.
type InfoServer interface {
	// 查询用户的基本信息
	GetUserInfoBasic(context.Context, *UserInfoBasicReq) (*UserInfoBasicResp, error)
	// 查询用户的详细信息
	GetUserInfoDetail(context.Context, *UserInfoDetailReq) (*UserInfoDetailResp, error)
	mustEmbedUnimplementedInfoServer()
}

// UnimplementedInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInfoServer struct{}

func (UnimplementedInfoServer) GetUserInfoBasic(context.Context, *UserInfoBasicReq) (*UserInfoBasicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoBasic not implemented")
}
func (UnimplementedInfoServer) GetUserInfoDetail(context.Context, *UserInfoDetailReq) (*UserInfoDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoDetail not implemented")
}
func (UnimplementedInfoServer) mustEmbedUnimplementedInfoServer() {}
func (UnimplementedInfoServer) testEmbeddedByValue()              {}

// UnsafeInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InfoServer will
// result in compilation errors.
type UnsafeInfoServer interface {
	mustEmbedUnimplementedInfoServer()
}

func RegisterInfoServer(s grpc.ServiceRegistrar, srv InfoServer) {
	// If the following call pancis, it indicates UnimplementedInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Info_ServiceDesc, srv)
}

func _Info_GetUserInfoBasic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoBasicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).GetUserInfoBasic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Info_GetUserInfoBasic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).GetUserInfoBasic(ctx, req.(*UserInfoBasicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Info_GetUserInfoDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).GetUserInfoDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Info_GetUserInfoDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).GetUserInfoDetail(ctx, req.(*UserInfoDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Info_ServiceDesc is the grpc.ServiceDesc for Info service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Info_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.info",
	HandlerType: (*InfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getUserInfoBasic",
			Handler:    _Info_GetUserInfoBasic_Handler,
		},
		{
			MethodName: "getUserInfoDetail",
			Handler:    _Info_GetUserInfoDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
